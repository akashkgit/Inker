{"version":3,"file":"cS1.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;;;;;;;AEjEA;AACA;AACA;AACA;AACA","sources":["webpack://my-webpack-project/./cS1.tsx","webpack://my-webpack-project/webpack/before-startup","webpack://my-webpack-project/webpack/startup","webpack://my-webpack-project/webpack/after-startup"],"sourcesContent":["console.log(\"loaded cs\");\n\nchrome.runtime.onMessage.addListener(async (request, sender, resp) => {\n    console.log(\" recieved details\");\n    \n    const req=request;\n    console.log(req);\n    console.log(req.ev.menuItemId === \"inkIt\")\n    if (req.ev.menuItemId === \"inkIt\") {\n            \n           console.log(\" fetching UI controls data form chrome storage\")\n                let  Storage= await chrome.storage.sync.get(\"controls\")\n                if( !Storage || ! Storage.controls) {\n                        Storage=await chrome.storage.local.get(\"controls\")\n                }\n                \n                let Controls=Storage.controls;\n\n            let sel = window.getSelection();\n            let rnge = sel.getRangeAt(0);\n            let boxes = rnge.getClientRects();\n            let nodes=rnge.commonAncestorContainer;\n            //=(nodes as HTMLElement).style.position=\"relative\";\n            \n            let x=window.scrollX;\n            let y=window.scrollY\n            let bx = Object.entries(boxes).map((val, id) => {\n                    let div = document.createElement(\"div\");\n                    console.log(\" val \", val);\n                    div.setAttribute(\"id\", \"one\");\n                    \n                    div.style.top = (val[1].y + y) + \"px\";\n                    div.style.left = (val[1].x + x) + \"px\";\n                    //div.style.border = \"2px solid red\"\n                    div.style.width = val[1].width + \"px\";\n\n                    div.style.height = val[1].height + \"px\";\n                    div.style.zIndex=\"100\";\n                    //--- customizing the inked portion -----\n                       console.log(\"controls \",Controls,Controls.style===\"underline\",Controls.style===\"box\")\n                        if(Controls.style===\"box\"){\n                             div.style.borderWidth=(Number(Controls.thickness) * 1)+ \"px\";\n                             div.style.borderColor=Controls.colorPicker\n                             div.style.borderStyle=Controls.lineStyle as string;\n                             console.log(\" boxing \")\n                        }\n                        else if(Controls.style===\"underline\"){\n                                console.log(\" underlining \",Controls.lineStyle as string)\n                                div.style.borderBottomWidth= (Number(Controls.thickness) * 1)+ \"px\";\n                                div.style.borderBottomColor=Controls.colorPicker\n                                div.style.borderBottomStyle=Controls.lineStyle as string;\n                                console.log(\"bototmborder  \",div.style.borderBottom)\n                        }\n\n\n                    //-----------------------------------------\n                   (document.body).appendChild(div);\n                    div.style.position = \"absolute\";\n                    return div;\n                    \n            });\n            console.log(bx);\n            \n    }\nresp();\n})\n    \n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[\"./cS1.tsx\"]();\n",""],"names":[],"sourceRoot":""}