{"version":3,"file":"cS1.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;AACA;AAKA;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACNA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA","sources":["webpack://my-webpack-project/./csHelper.tsx","webpack://my-webpack-project/webpack/bootstrap","webpack://my-webpack-project/webpack/runtime/define property getters","webpack://my-webpack-project/webpack/runtime/hasOwnProperty shorthand","webpack://my-webpack-project/webpack/runtime/make namespace object","webpack://my-webpack-project/./cS1.tsx"],"sourcesContent":["\nexport let storeSelected=async(bx:HTMLDivElement[],request:any)=>{\n   console.log(\" inside cs helper \");\n    let sync=true;\n    let res =await chrome.storage.sync.get(\"store\")      \n   if(!res|| !res.store)\n   {res=await chrome.storage.local.get(\"store\");sync=false;}\n   console.log(\" inside cs helper 2\");\n   let pagePresent=false;\n   let pageUrl=request.ev.pageUrl;\n   let idx:number;\n   if(res.store[pageUrl])   {pagePresent=true; idx=res.store[pageUrl].idx;}\n   else  idx=0;\n   console.log(\" inside cs helper 3\");\n   bx.forEach((div:HTMLDivElement,id:number)=>{\n    div.setAttribute(\"id\",String(id));\n    div.setAttribute(\"group\",String(idx+1))\n})\nconsole.log(\" inside cs helper 4\");\nlet toBeStored:typeof res.store={};\nif(pagePresent){\n    \n    toBeStored[pageUrl]={...res.store[pageUrl],[idx+1]:bx,\"idx\":idx+1}\n    console.log(\"storing boxes in the store \",toBeStored);\n}\nelse{\n    toBeStored[pageUrl]={\"idx\":idx+1,[idx+1]:bx}\n}\nconsole.log(\" inside cs helper 5\");\nif(sync)await chrome.storage.sync.set({\"store\":toBeStored})\nelse await chrome.storage.local.set({\"store\":toBeStored})\n\n\n\n\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { storeSelected } from \"./csHelper\";\n\nconsole.log(\"loaded cs\");\n\nchrome.runtime.onMessage.addListener(async (request, sender, resp) => {\n    \n    console.log(\" recieved details\");\n    \n    const req=request;\n    console.log(req);\n    console.log(req.ev.menuItemId === \"inkIt\")\n    if (req.ev.menuItemId === \"inkIt\") {\n            \n           console.log(\" fetching UI controls data form chrome storage\")\n                let  Storage= await chrome.storage.sync.get(\"controls\")\n                if( !Storage || ! Storage.controls) {\n                        Storage=await chrome.storage.local.get(\"controls\")\n                }\n                \n                let Controls=Storage.controls;\n\n            let sel = window.getSelection();\n            let rnge = sel.getRangeAt(0);\n            let boxes = rnge.getClientRects();\n            let nodes=rnge.commonAncestorContainer;\n            //=(nodes as HTMLElement).style.position=\"relative\";\n            \n            let x=window.scrollX;\n            let y=window.scrollY\n            \n            let bx = Object.entries(boxes).map((val, id) => {\n                    let div = document.createElement(\"div\");\n                    console.log(\" val \", val);\n                    div.setAttribute(\"id\", \"one\");\n                    \n                    div.style.top = (val[1].y + y) + \"px\";\n                    div.style.left = (val[1].x + x) + \"px\";\n                    //div.style.border = \"2px solid red\"\n                    div.style.width = val[1].width + \"px\";\n\n                    div.style.height = val[1].height + \"px\";\n                    div.style.zIndex=\"100\";\n                    //--- customizing the inked portion -----\n                       console.log(\"controls \",Controls,Controls.style===\"underline\",Controls.style===\"box\")\n                        if(Controls.style===\"box\"){\n                             div.style.borderWidth=(Number(Controls.thickness) * 1)+ \"px\";\n                             div.style.borderColor=Controls.colorPicker\n                             div.style.borderStyle=Controls.lineStyle as string;\n                             console.log(\" boxing \")\n                        }\n                        else if(Controls.style===\"underline\"){\n                                console.log(\" underlining \",Controls.lineStyle as string)\n                                div.style.borderBottomWidth= (Number(Controls.thickness) * 1)+ \"px\";\n                                div.style.borderBottomColor=Controls.colorPicker\n                                div.style.borderBottomStyle=Controls.lineStyle as string;\n                                console.log(\"bototmborder  \",div.style.borderBottom)\n                        }\n\n\n                    //-----------------------------------------\n                   (document.body).appendChild(div);\n                    div.style.position = \"absolute\";\n                    return div;\n                    \n            });\n           storeSelected(bx,request)\n            console.log(bx);\n            \n    }\nresp();\n})\n    \n"],"names":[],"sourceRoot":""}